AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  LambdaDynamoDB

  Sample SAM Template for LambdaDynamoDB

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 50
    MemorySize: 128
    CodeUri: employees/
    Runtime: python3.9
    Layers:
      - !Ref TempConversionDepLayer
    Environment:
      Variables:
        CUSTOM_NAME: !Ref CustomName
        TABLE_NAME: !Ref MyDynamoDBTable
    Tracing: Active
  Api:
    TracingEnabled: True

Metadata:
  AWS::ServerlessRepo::Application:
    Name: employee-app
    Description: Hello Employees
    Author: Elvis
    SemanticVersion: 0.0.1

Parameters:
  CustomName:
    Type: String

Resources:
####################################
# Employees function
####################################
  GetEmployeeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appget.get_employee
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /employee
            Method: get
####################################
# Employee pagination function
####################################
  GetEmployeesByPaginationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: apppagination.get_employees
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /pagination
            Method: get
####################################
# Get all employees function
####################################
  GetAllEmployeesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appscan.get_all_employees
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /employees
            Method: get
####################################
# Employees by address function
####################################
  GetAllEmployeesAddressFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appscan.get_employees_address
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /employeesAddress
            Method: get
####################################
# Employees by department function
####################################
  GetAllEmployeesByDepartmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appscan.get_employees_department
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /employeesByDepartment
            Method: get
####################################
# All items function
####################################
  GetAllEmployeesByItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appscan.get_employees_department_by_item_size
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /employeesByItem
            Method: get
####################################
# Delete employee function
####################################
  DeleteEmployeeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appdelete.delete_employee
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /delete
            Method: delete
####################################
# Create employee function
####################################
  CreateEmployeeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appput.put_employee
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /create
            Method: put
####################################
# Update employee function
####################################
  UpdateEmployeeFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appupdate.update_employee
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        HelloWorld:
          Type: Api
          Properties:
            Path: /update
            Method: post
####################################
# docs-dynamodb Stream function
####################################
  ProcessDynamoDBStreamFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appdynamdbstream.dynamodb_trigger
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
        - AWSLambdaDynamoDBExecutionRole
        - DynamoDBReadPolicy:
            TableName: !Ref MyDynamoDBTable
      Events:
        stream:
          Type: docs-dynamodb
          Properties:
            Stream:
              !GetAtt MyDynamoDBTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
#            FilterCriteria:
#              Filters:
#                # Filter pattern to check only deleted action on docs-dynamodb
#                - Pattern: '{"eventName": ["REMOVE"]}'

####################################
# Thumbnail function
####################################
  CreateThumbnailFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: appS3.create_thumbnail
      Architectures:
        - x86_64
      Policies:
        - AWSLambdaExecute
      Events:
        CreateThumbnailEvent:
          Type: S3
          Properties:
            Bucket: !Ref SrcBucket
            Events: s3:ObjectCreated:*
####################################
# S3 Source bucket
####################################
  SrcBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogBucket
####################################
# S3 bucket login bucket
####################################
  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
####################################
# Lambda layers
####################################
  TempConversionDepLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
        ContentUri: dependencies/
        CompatibleRuntimes:
          - python3.9
      Metadata:
        BuildMethod: python3.9
####################################
# docs-dynamodb Table
####################################
  MyDynamoDBTable:
    Type: AWS::docs-dynamodb::Table
    DeletionPolicy: Delete
    Properties:
      TableName: EmployeesTable
      AttributeDefinitions:
        - AttributeName: first_name
          AttributeType: S
        - AttributeName: id
          AttributeType: N
      KeySchema:
        - AttributeName: first_name
          KeyType: HASH # partition_key
        - AttributeName: id
          KeyType: RANGE # sort_key
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      StreamSpecification:  # Enable dynamodb streaming
        StreamViewType: NEW_AND_OLD_IMAGES

Outputs:
  EmployeeAPI:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/employee/"
  GetEmployeeFunction:
    Description: "Hello World Lambda Function ARN"
    Value: !GetAtt GetEmployeeFunction.Arn
  EmployeeFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt GetEmployeeFunctionRole.Arn
